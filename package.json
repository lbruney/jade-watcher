{
  "name": "jade-watcher",
  "version": "1.2.1",
  "description": "express/connect middleware to watch and handle jade files",
  "keywords": [
    "jade",
    "watcher",
    "node",
    "express",
    "middleware"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com:lbruney/jade-watcher.git"
  },
  "author": {
    "name": "Lisa-Ann Bruney",
    "email": "thebruney@bruneysite.com",
    "url": "http://thebruneysite.com"
  },
  "dependencies": {
    "jade": "~1.3.0"
  },
  "devDependencies": {},
  "licenses": "MIT",
  "main": "./index.js",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "true"
  },
  "readme": "jade-watcher\n============\n\nExpress/connect middleware to watch and handle jade files. This middleware acts as a simple wrapper around the jade command line utility.\n\n## Install\n\n```bash\nnpm install -g jade\nnpm install jade-watcher\n```\n\n## Examples\n\n```js\napp.use(jadeWatcher({ src: __dirname, srcName: '_*' })); // Looks for files starting with an underscore; _header.jade would match\napp.use(jadeWatcher({ srcName: 'index' })); // Watches a single file; index.jade\napp.use(jadeWatcher({ pretty: true, obj: JSON.stringify(localsObject) }));\napp.use(jadeWatcher({ src: __dirname + '/views', out: __dirname + '/build', pretty: true, obj: __dirname + '/locals.json' }));\n```\n\n## express\n\n```javascript\nvar express = require('express');\nvar jadeWatcher = require('jade-watcher');\n\nvar app = express();\napp.use(jadeWatcher({ client: true, noDebug: true }));\n\n// Add your routes here, etc.\n\napp.listen(3000);\n```\n\n## api\n\n### jadeWatcher(options)\n\nCreate new middleware to serve watching jade files and generating the html\n\n**Options**\n\n- `src (string)`         jade files src directory; Default to `src/views`\n- `out (string)`         the directory where the compiled html should be output to; Default to `static/views`\n- `srcName (string)`     can be a file name or wildcard (without .jade extension); Default is wildcard *\n- `obj (string)`         javaScript options object or JSON file containing it\n- `path (string)`        filename used to resolve includes\n- `pretty (boolean)`     compile pretty html output\n- `client (boolean)`     compile function for client-side runtime.js\n- `noDebug (boolean)`    compile without debugging (smaller functions)\n- `watch (boolean)`      watch files for changes and automatically re-render; Default is true\n- `debug (boolean)`      print to console or terminal; Default is true\n- `extension (string)`   specify the output file extension\n- `nameAfterFile (boolean)`     name the template after the last section of the file path (requires --client and overriden by --name)\n- `doctype (string)`     specify the doctype on the command line (useful if it is not specified by the template)\n\n## Debugging\n* Default `src` value assumes that the jade files reside in directories `src/views`. The `static/views` directories will be created automatically when jade-watcher runs, so assuming the entire app is in directory `myApp` then:\n\n```\nmyApp/\n-/src\n--/views/index.jade\n:\n:\n-/static\n--views\n```\n\n* Behaviour is similar to that of Express stylus middleware, that is, html is compiled upon browser reload.\n\n## License\n\n[MIT](LICENSE)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lbruney/jade-watcher/issues"
  },
  "homepage": "https://github.com/lbruney/jade-watcher",
  "_id": "jade-watcher@1.2.1",
  "_from": "jade-watcher@~1.2.1",
  "_resolved": "https://github.com/lbruney/jade-watcher/archive/1.2.1.tar.gz"
}
